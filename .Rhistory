shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(clean_intern)
View(eff_calc)
View(read_mushroom)
View(weather_plot_f)
model_plot_f <- function(model, validation_errors, plot_type = "loss", baseline = 0, max_y = NULL){
df <- model$evaluation_log
#df[['train_accuracy']] <- 1 - df$train_error
df[['train_error']] <- 1 - df$train_aucpr
df[['train_accuracy']] <- df$train_aucpr
if(is.null(max_y)){
max_y <- max(df$train_error)
max_y <- max(max_y, validation_errors)
#max_y <- max(max_y, baseline)
max_y <- max_y + 0.05
}
shiny::runApp()
install.packages("DT")
install.packages("DT")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pkgs <- as.data.frame(installed.packages(), stringsAsFactors = FALSE, row.names = FALSE)
pkgs[, c("Package", "Version", "Built")]
update.packages(ask = FALSE, checkBuilt = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabItem_model <-
tabItem(tabName = "model",
fluidRow(
column(width = 3,
h2(icon("cube"), HTML("&nbsp;"),"Model")
)
,box(
title = ""
,collapsible = TRUE
,collapsed = FALSE
,width = 12
,background = NULL
,status = "primary"
,solidHeader = TRUE
,fluidRow(
column(3, valueBoxOutput("actualTemp", width = 12))
,column(3, valueBoxOutput("model_baseline_vb", width = 12))
,column(3, valueBoxOutput("model_training_vb", width = 12))
,column(3, valueBoxOutput("model_algorithm_vb", width = 12))
)
,fluidRow(
column(
width = 6,
plotlyOutput("model_plot") %>% withSpinner(type = 5, color = '#808080')
),
column(
width = 6,
DT::dataTableOutput("model_feature_importance_dt")
)
)
,tags$h4("Parameters")
,column(
width = 6
,setSliderColor(c("#008744", "#0057e7"), c(1, 2))
,sliderInput("temp", "Actual Temp",
min = 20, max = 99, value = 80, step = 1
)
,sliderInput("model_iterations", "Boosting iterations",
min = 1, max = 100, value = 10, step = 1
)
,sliderInput("model_depth", "Maximum tree depth",
min = 1, max = 20, value = 2, step = 1
)
,sliderInput("model_rate", "Learning rate (eta)",
min = 0.1, max = 0.5, value = 0.5, step = 0.05
)
)
,column(
width = 6
,sliderInput("model_gamma", "Minimum loss reduction for split (gamma)",
min = 0, max = 1, value = 0, step = 0.01
)
,sliderInput("model_weight", "Minimum child weight",
min = 1, max = 10, value = 1, step = 1
)
,sliderInput("model_subsample", "Subsample ratio of rows",
min = 0.1, max = 1, value = 0.8, step = 0.1
)
,sliderInput("model_colsample", "Subsample ratio of columns",
min = 0.1, max = 1, value = 0.2, step = 0.1
)
)
,fluidRow(
column(
width = 12
,align = "center"
,actionBttn(
inputId = "model_learn_more_button"
,label = "Learn more"
,color = "default"
,style = "jelly"
)
)
)
,hidden(
div(
id = "model_learn_more_div"
,fluidRow(
column(
width = 12
,tags$p("The goal is to find model parameters that maximise validation accuracy.")
,tags$p("A meaningful value has to be above the baseline accuracy (stratified random values).")
,tags$ul(
tags$li(tags$strong("Training size"), "is the percentage of the data to use as the training set.")
,tags$li(tags$strong("Boosting iterations"), "is the maximum number of iterations")
,tags$li(tags$strong("Maximum tree depth"), "maximum depth of a tree")
,tags$li(tags$strong("Learning rate (eta)"), "the rate at which the model learns patterns in data")
,tags$li(tags$strong("Minimum loss reduction for split (gamma)"), "minimum loss reduction required to make a further partition on a leaf node of the tree")
,tags$li(tags$strong("Minimum child weight"), "if a leaf node has less weights then it stops splitting")
,tags$li(tags$strong("Subsample ratio of rows"), "randomly select subsample of the training instance rows")
,tags$li(tags$strong("Subsample ratio of columns"), "randomly select subsample of the training instance rows")
,tags$li(tags$strong("Gain"), "the relative gain of this feature's splits")
,tags$li(tags$strong("Cover"), "the relative number of observation related to this feature")
,tags$li(tags$strong("Frequency"), "the relative number of times a particular feature occurs in the trees of the model")
)
)
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??round
?round
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages('vctrs')
install.packages("vctrs")
runApp()
shiny::runApp()
install.packages("tidyverse")
install.packages("tidyverse")
shiny::runApp()
update.packages('vctrs')
runApp()
update.packages('vctrs')
shiny::runApp()
update.packages()
runApp()
shiny::runApp()
remotes::install_github('rapporter/pander')
devtools::install_github('rapporter/pander')
devtools::install_github('rapporter/pander')
shiny::runApp()
install.packages('vctrs')
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
shiny::runApp()
shiny::runApp()
install.packages("vctrs")
shiny::runApp()
install.packages('rlang')
install.packages("rlang")
shiny::runApp()
shiny::runApp()
install.packages('rlang')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot??
sdf\\
??plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(history)
runApp()
runApp()
plot(
(1:100) ^ 2,
type = "l",
lty  = "dashed",
lwd  = 3,
col  = "chocolate",
main = 'plot((1:100) ^ 2, type = "l", lty = "dashed", ...)'
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
